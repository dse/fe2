#!/usr/bin/env bash
set -o errexit
set -o pipefail
set -o nounset

main () {
    long_lines_filter="................................" # 32 characters
    long_lines_filter="${long_lines_filter}${long_lines_filter}" # 64
    long_lines_filter="${long_lines_filter}${long_lines_filter}" # 128
    long_lines_filter="${long_lines_filter}${long_lines_filter}" # 256
    long_lines_filter="${long_lines_filter}${long_lines_filter}" # 512
    long_lines_filter="${long_lines_filter}${long_lines_filter}" # 1024

    set_default_excludes
    declare -a -g include=()
    declare -a -g grep_binary=(-I)

    grep=grep
    if type -P ggrep >&/dev/null ; then
        grep=ggrep
    fi

    opt_binary=0
    opt_find=0
    opt_command=0
    opt_long_lines=0

    local OPTIND=1 OPTION OPTERR=1 OPTARG
    while getopts 'h:-:.:*:' OPTION ; do
        if [[ "${OPTION}" = "-" ]] ; then
            if [[ "${OPTARG}" = *= ]] ; then
                OPTIND=$((OPTIND + 1))
                if (( OPTIND > $# )) ; then
                    echo "option missing argument -- ${OPTARG%=}"
                    exit 1
                fi
                OPTARG="${!OPTIND}"
            elif [[ "${OPTARG}" = *=* ]] ; then
                OPTION="${OPTARG%%=*}"
                OPTARG="${OPTARG#*=}"
            else
                OPTION="${OPTARG}"
                unset OPTARG
            fi
        fi
        case "${OPTION}" in

            # exclusions
            vendor)         exclude_dir__vendor=();;
            git|vcs)        exclude_dir__vcs=();;
            cache)          exclude_dir__cache=()
                            exclude__cache=();;
            backup)         exclude__backup=();;
            temp)           exclude__temp=();;
            bloat)          exclude__bloat=();;
            quasi|office)   exclude__quasi=();;
            all)            exclude_dir__vendor=()
                            exclude_dir__vcs=()
                            exclude_dir__cache=()
                            exclude__backup=()
                            exclude__temp=()
                            exclude__bloat=()
                            exclude__cache=()
                            exclude__quasi=();;

            find)           opt_find=1;;
            command)        opt_command=1;;
            long-lines)     opt_long_lines=1;;

            '.')                # e.g., -.js -'.min.*'
                if [[ ! -v OPTARG ]] ; then
                    echo "option requires argument -- ${OPTION}" >&2
                    exit 1
                fi
                case "${OPTARG}" in
                    html|htm)
                        include+=(--include="*.html"
                                  --include="*.htm")
                        ;;
                    js)
                        include+=(--include="*.js"
                                  --include="*.cjs"
                                  --include="*.mjs"
                                  --include="*.ts"
                                  --include="*.jsx")
                        ;;
                    css)
                        include+=(--include="*.css"
                                  --include="*.scss")
                        ;;
                    *)
                        include+=(--include="*.${OPTARG}")
                        unexclude "*.${OPTARG}"
                        ;;
                esac
                ;;
            allow)              # --allow='*.tmp'
                if [[ ! -v OPTARG ]] ; then
                    echo "option requires argument -- ${OPTION}" >&2
                    exit 1
                fi
                unexclude "${OPTARG}"
                ;;
            binary)
                binary=$((binary + 1))
                if (( binary == 1 )) ; then
                    grep_binary=()
                elif (( binary == 2 )) ; then
                    # --binary --binary
                    grep_binary=(-a)
                fi
                ;;
            grep)               # --grep or --grep=<grep>
                if [[ -v OPTARG ]] && [[ "$OPTARG" != "" ]] ; then
                    grep=${OPTARG}
                else
                    grep=grep
                fi
                ;;
            excluded)
                for exclude in \
                    "${exclude_dir__vendor[@]}" \
                    "${exclude_dir__vcs[@]}" \
                    "${exclude_dir__cache[@]}" \
                    "${exclude__backup[@]}" \
                    "${exclude__temp[@]}" \
                    "${exclude__bloat[@]}" \
                    "${exclude__cache[@]}" \
                    "${exclude__quasi[@]}" ; do
                    echo "${exclude}"
                done
                exit 0
                ;;
            help)
                help
                exit 0
                ;;
            '?')                # invalid short opt; msg was printed
                exit 1
                ;;
            *)                  # invalid long opt; pass to grep
                OPTIND=$((OPTIND - 1))
                break
                ;;
        esac
    done
    shift $((OPTIND - 1))

    if (( opt_find )) ; then
        # List files that would be searched; ignore grep options and
        # arguments specified on command line
        set -- -l -e '^$' -e '.' "$@"
    fi

    declare -a -g grep_command=(
        $grep
        "${exclude_dir__vendor[@]}"
        "${exclude_dir__vcs[@]}"
        "${exclude_dir__cache[@]}"
        "${exclude__backup[@]}"
        "${exclude__temp[@]}"
        "${exclude__bloat[@]}"
        "${exclude__cache[@]}"
        "${exclude__quasi[@]}"
        "${include[@]}"
        "${grep_binary[@]}"
        -r "$@"
    )
    declare -a -g long_lines_cmd=(
        grep -v "${long_lines_filter}"
    )

    if (( opt_command )) ; then
        if (( opt_long_lines )) ; then
            echo "${grep_command[@]@Q}"
        else
            echo "${grep_command[@]@Q} | ${long_lines_cmd[@]@Q}"
        fi
        exit 0
    fi
    if (( opt_long_lines )) ; then
        exec "${grep_command[@]}"
    else
        "${grep_command[@]}" | "${long_lines_cmd[@]}"
    fi
}

unexclude () {
    local glob="$1"; shift
    unexclude_from exclude_dir__vendor "--exclude-dir=${glob}"
    unexclude_from exclude_dir__vcs    "--exclude-dir=${glob}"
    unexclude_from exclude_dir__cache  "--exclude-dir=${glob}"
    unexclude_from exclude__backup     "--exclude=${glob}"
    unexclude_from exclude__temp       "--exclude=${glob}"
    unexclude_from exclude__bloat      "--exclude=${glob}"
    unexclude_from exclude__cache      "--exclude=${glob}"
    unexclude_from exclude__quasi      "--exclude=${glob}"
}

unexclude_from () {
    local varname="$1"; shift
    local -n var="${varname}"
    local member="$1"; shift
    local -a temp_array=()
    local arg
    for arg in "${var[@]}" ; do
        if [[ "${arg}" != "${member}" ]] ; then
            temp_array+=("${arg}")
        fi
    done
    var=("${temp_array[@]}")
}

set_default_excludes () {
    declare -a -g exclude_dir__vendor=(
        --exclude-dir='node_modules'
        --exclude-dir='vendor'
    )
    declare -a -g exclude_dir__vcs=(
        --exclude-dir='.git'
        --exclude-dir='.svn'
        --exclude-dir='SCCS'
        --exclude-dir='RCS'
        --exclude-dir='CVS'
        --exclude-dir='MCVS'
        --exclude-dir='.src'
        --exclude-dir='.hg'
        --exclude-dir='.bzr'
        --exclude-dir='_MTN'
        --exclude-dir='_darcs'
        --exclude-dir='{arch}'
    )
    declare -a -g exclude_dir__cache=(
        --exclude-dir='.cache'
        --exclude-dir='npm-cache'
        --exclude-dir='.sass-cache'
        --exclude-dir='zip-cache'
        --exclude-dir='.cpan'
    )
    declare -a -g exclude__backup=(
        --exclude='*~'
        --exclude='#*#'
        --exclude='*.bak'
        --exclude='*.bak.*'
        --exclude='*.old'
        --exclude='*.old.*'
        --exclude='*.orig'
        --exclude='*.orig.*'
        --exclude='*-orig'
        --exclude='*-orig.*'
    )
    declare -a -g exclude__temp=(
        --exclude='*.tmp'
        --exclude='*.tmp.*'
    )
    declare -a -g exclude__bloat=(
        --exclude='*.min'
        --exclude='*.min.*'
        --exclude='*.map'
        --exclude='*.map.*'
        --exclude='composer.lock'
        --exclude='yarn.lock'
        --exclude='package-lock.json'
        --exclude='*.bundle.js'
        --exclude='*.chunk.js'
    )
    declare -a -g exclude__cache=(
        --exclude='projectile.cache' # emacs
        --exclude='ido.last'         # emacs
    )
    declare -a -g exclude__quasi=(
        --exclude='*.xls'
        --exclude='*.doc'
        --exclude='*.ppt'
        --exclude='*.pdf'
        --exclude='*.ps'
    )
}

help () { cat <<EOF; }
fe [<option> ...] [<grep options and arguments> ...]
   --vendor             allow vendor, node_modules, etc.
   --vcs, --git         allow .git, .svn, etc.
   --cache              allow cache directories and files
   --backup, --temp     allow backup and/or temporary files
   --bloat              allow annoying large files
   --quasi, --office    allow office files, etc.
   --allow=<files>      removed specified exclusion
   -.<ext>              include ONLY specified files (also un-excludes)
                            -.html, -.js, -.css include multiple extensions
   --all                remove all exclusions (except binaries)
   --binary             grep binary files as normal (excluded by default)
   --binary --binary    grep binary files as if text
   --grep=<grep>        program to invoke instead of grep or ggrep
   --long-lines         don't exclude long lines from output
   --command            print grep command that would execute
   --excluded           list directory and file exclusions
   --find               list files that would be grepped
EOF

###############################################################################
main "$@"

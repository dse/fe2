#!/usr/bin/env bash
set -o errexit
set -o pipefail
set -o nounset

# last cmd in pipeline is 'grep "^"'; we want ITS return value.
shopt -s lastpipe

main () {
    long_lines_filter="................................" # 32 characters
    long_lines_filter="${long_lines_filter}${long_lines_filter}" # 64
    long_lines_filter="${long_lines_filter}${long_lines_filter}" # 128
    long_lines_filter="${long_lines_filter}${long_lines_filter}" # 256
    long_lines_filter="${long_lines_filter}${long_lines_filter}" # 512
    long_lines_filter="${long_lines_filter}${long_lines_filter}" # 1024

    declare -a -g include=()
    declare -a -g grep_binary=(-I)

    grep=grep
    if type -P ggrep >&/dev/null ; then
        grep=ggrep
    fi

    opt_binary=0                # detect --binary --binary
    opt_all=0                   # detect --all --all [--all]
    opt_find=0
    opt_command=0
    opt_long_lines=0

    opt_vendor=0
    opt_vcs=0
    opt_cache=0
    opt_backup=0
    opt_temp=0
    opt_bloat=0
    opt_quasi=0
    opt_all=0
    opt_excluded=0

    local OPTIND=1 OPTION OPTERR=1 OPTARG
    while getopts '.:-:' OPTION ; do
        if [[ "${OPTION}" = "-" ]] ; then
            if [[ "${OPTARG}" = *= ]] ; then
                OPTIND=$((OPTIND + 1))
                if (( OPTIND > $# )) ; then
                    echo "option missing argument -- ${OPTARG%=}"
                    exit 1
                fi
                OPTARG="${!OPTIND}"
            elif [[ "${OPTARG}" = *=* ]] ; then
                OPTION="${OPTARG%%=*}"
                OPTARG="${OPTARG#*=}"
            else
                OPTION="${OPTARG}"
                unset OPTARG
            fi
        fi

        case "${OPTION}" in

            # control exclusions
            vendor)       opt_vendor=$((opt_vendor+1));;
            git|vcs)      opt_vcs=$((opt_vcs+1));;
            cache)        opt_cache=$((opt_cache+1));;
            backup)       opt_backup=$((opt_backup+1));;
            temp)         opt_temp=$((opt_temp+1));;
            bloat)        opt_bloat=$((opt_bloat+1));;
            quasi|office) opt_quasi=$((opt_quasi+1));;
            all)          opt_all=$((opt_all+1));;
            binary)       opt_binary=$((opt_binary+1));;

            # control mode of operation
            find)         opt_find=$((opt_find+1));;
            command)      opt_command=$((opt_command+1));;
            long-lines)   opt_long_lines=$((opt_long_lines+1));;
            excluded)     opt_excluded=$((opt_excluded+1));;

            '.')                # e.g., -.js -'.min.*'
                if [[ ! -v OPTARG ]] ; then
                    echo "option requires argument -- ${OPTION}" >&2
                    exit 1
                fi
                case "${OPTARG}" in
                    html|htm)
                        include+=(--include="*.html"
                                  --include="*.htm")
                        ;;
                    js)
                        include+=(--include="*.js"
                                  --include="*.cjs"
                                  --include="*.mjs"
                                  --include="*.ts"
                                  --include="*.jsx")
                        ;;
                    css)
                        include+=(--include="*.css"
                                  --include="*.scss")
                        ;;
                    *)
                        include+=(--include="*.${OPTARG}")
                        unexclude "*.${OPTARG}"
                        ;;
                esac
                ;;
            include)
                if [[ ! -v OPTARG ]] ; then
                    echo "option requires argument -- ${OPTION}" >&2
                    exit 1
                fi
                include+=(--include="${OPTARG}")
                unexclude "${OPTARG}"
                ;;
            allow)              # --allow='*.tmp'
                if [[ ! -v OPTARG ]] ; then
                    echo "option requires argument -- ${OPTION}" >&2
                    exit 1
                fi
                unexclude "${OPTARG}"
                ;;
            grep)               # --grep or --grep=<grep>
                if [[ -v OPTARG ]] && [[ "$OPTARG" != "" ]] ; then
                    grep=${OPTARG}
                else
                    grep=grep
                fi
                ;;
            help)
                help
                exit 0
                ;;
            '?')                # invalid short opt; msg was printed
                exit 1
                ;;
            *)                  # invalid long opt; pass to grep
                OPTIND=$((OPTIND - 1))
                break
                ;;
        esac
    done
    shift $((OPTIND - 1))

    (( opt_vendor ))  && exclude_dir__vendor=()
    (( opt_vcs ))     && exclude_dir__vcs=()
    (( opt_cache ))   && exclude_dir__cache=()
    (( opt_cache ))   && exclude__cache=()
    (( opt_backup ))  && exclude__backup=()
    (( opt_temp ))    && exclude__temp=()
    (( opt_bloat ))   && exclude__bloat=()
    (( opt_quasi ))   && exclude__quasi=()

    if (( opt_all == 1 )) ; then
        exclude_dir__vendor=()
        exclude_dir__vcs=()
        exclude_dir__cache=()
        exclude__backup=()
        exclude__temp=()
        exclude__bloat=()
        exclude__cache=()
        exclude__quasi=()
    elif (( opt_all >= 2 )) ; then # --all --all
        grep_binary=()
    elif (( opt_all >= 3 )) ; then # --all --all --all
        grep_binary=(-a)
    fi

    if (( opt_binary == 1 )) ; then
        grep_binary=()
    elif (( opt_binary == 2 )) ; then # --binary --binary
        grep_binary=(-a)
    fi

    if (( opt_excluded )) ; then
        for exclude in \
            "${exclude_dir__vendor[@]}" \
                "${exclude_dir__vcs[@]}" \
                "${exclude_dir__cache[@]}" \
                "${exclude__backup[@]}" \
                "${exclude__temp[@]}" \
                "${exclude__bloat[@]}" \
                "${exclude__cache[@]}" \
                "${exclude__quasi[@]}" ; do
            echo "${exclude}"
        done
        exit 0
    fi

    if (( opt_find )) ; then
        # List files that would be searched; ignore grep options and
        # arguments specified on command line
        set -- -l -e '^$' -e '.' "$@"
    fi

    declare -a -g grep_command=(
        $grep
        "${exclude_dir__vendor[@]}"
        "${exclude_dir__vcs[@]}"
        "${exclude_dir__cache[@]}"
        "${include[@]}"
        "${exclude__backup[@]}"
        "${exclude__temp[@]}"
        "${exclude__bloat[@]}"
        "${exclude__cache[@]}"
        "${exclude__quasi[@]}"
        "${grep_binary[@]}"
        -r "$@"
    )

    declare -a -g long_lines_cmd=(
        grep -v "${long_lines_filter}"
    )

    if (( opt_command )) ; then
        if (( opt_long_lines )) ; then
            echo "${grep_command[@]@Q}"
        else
            echo "${grep_command[@]@Q} | ${long_lines_cmd[@]@Q} | grep ^"
        fi
        exit 0
    fi

    if (( !$# )) ; then
        echo "fe2: no arguments" >&2
        exit 1
    fi

    if (( opt_long_lines )) ; then
        exec "${grep_command[@]}"
    else
        "${grep_command[@]}" | "${long_lines_cmd[@]}" | grep "^"
    fi
}

unexclude () {
    local glob="$1"; shift
    unexclude_from exclude_dir__vendor "--exclude-dir=${glob}"
    unexclude_from exclude_dir__vcs    "--exclude-dir=${glob}"
    unexclude_from exclude_dir__cache  "--exclude-dir=${glob}"
    unexclude_from exclude__backup     "--exclude=${glob}"
    unexclude_from exclude__temp       "--exclude=${glob}"
    unexclude_from exclude__bloat      "--exclude=${glob}"
    unexclude_from exclude__cache      "--exclude=${glob}"
    unexclude_from exclude__quasi      "--exclude=${glob}"
}

unexclude_from () {
    local varname="$1"; shift
    local -n var="${varname}"
    local member="$1"; shift
    local -a temp_array=()
    local arg
    for arg in "${var[@]}" ; do
        if [[ "${arg}" != "${member}" ]] ; then
            temp_array+=("${arg}")
        fi
    done
    var=("${temp_array[@]}")
}

declare -a exclude_dir__vendor=(
    --exclude-dir='node_modules'
    --exclude-dir='vendor'
)
declare -a exclude_dir__vcs=(
    --exclude-dir='.git'
    --exclude-dir='.svn'
    --exclude-dir='SCCS'
    --exclude-dir='RCS'
    --exclude-dir='CVS'
    --exclude-dir='MCVS'
    --exclude-dir='.src'
    --exclude-dir='.hg'
    --exclude-dir='.bzr'
    --exclude-dir='_MTN'
    --exclude-dir='_darcs'
    --exclude-dir='{arch}'
)
declare -a exclude_dir__cache=(
    --exclude-dir='.cache'
    --exclude-dir='npm-cache'
    --exclude-dir='.sass-cache'
    --exclude-dir='zip-cache'
    --exclude-dir='.cpan'
    --exclude-dir='_cacache'    # ~/.npm/_cache
)
declare -a exclude__backup=(
    --exclude='*~'
    --exclude='#*#'
    --exclude='*.bak'
    --exclude='*.bak.*'
    --exclude='*.old'
    --exclude='*.old.*'
    --exclude='*.orig'
    --exclude='*.orig.*'
    --exclude='*-orig'
    --exclude='*-orig.*'
)
declare -a exclude__temp=(
    --exclude='*.tmp'
    --exclude='*.tmp.*'
)
declare -a exclude__bloat=(
    --exclude='*.min'
    --exclude='*.min.*'
    --exclude='*.map'
    --exclude='*.map.*'
    --exclude='composer.lock'
    --exclude='yarn.lock'
    --exclude='package-lock.json'
    --exclude='*.bundle.js'
    --exclude='*.chunk.js'
)
declare -a exclude__cache=(
    --exclude='projectile.cache' # emacs
    --exclude='ido.last'         # emacs
)
declare -a exclude__quasi=(
    --exclude='*.xls'
    --exclude='*.doc'
    --exclude='*.ppt'
    --exclude='*.pdf'
    --exclude='*.ps'
)

help () { cat <<EOF; }
fe [<option> ...] [<grep options and arguments> ...]
   --vendor             allow vendor, node_modules, etc.
   --vcs, --git         allow .git, .svn, etc.
   --cache              allow cache directories and files
   --backup, --temp     allow backup and/or temporary files
   --bloat              allow annoying large files
   --quasi, --office    allow office files, etc.
   --allow=<files>      removed specified exclusion
   -.<ext>              include ONLY specified files (also un-excludes)
       -.html, -.js, -.css      include multiple extensions
   --all                remove all exclusions (except binaries)
   --all --all          " but also allow binaries too
   --all --all --all    " but also grep binary files as text
   --binary             grep binary files as normal (excluded by default)
   --binary --binary    grep binary files as if text
   --grep=<grep>        program to invoke instead of grep or ggrep
   --long-lines         don't exclude long lines from output
   --command            print grep command that would execute
   --excluded           list directory and file exclusions
   --find               list files that would be grepped
EOF

# matches control and high-bit characters
NOT_ASCII_PRINTABLE=$'[^] !"#$%&\x27()*+,./0-9:;<=>?@A-Z[\^_a-z`{|}~\t\r-]'
#                               ^ U+0027 APOSTROPHE
# cannot use a plain range because locales

# Will this match null characters?
NON_ASCII=$'[^] !"#$%&\x27()*+,./0-9:;<=>?@A-Z[\^_a-z`{|}~\x01\x02\x03\x04\x05\x06\x07\x08\x09\x0b\x0c\x0d\x0e\x0f\x10\x11\x12\x13\x14\x15\x16\x17\x18\x19\x1a\x1b\x1c\x1d\x1e\x1f-]'
#             ^[1]                                        ^[3]                                ^[4]                                                                                ^[2]
# [1] ] must appear first either after opening [^ or [ of bracket group
# [2] - must appear before closing ] or after opening [^ or [ of bracket group
# [3] \x00 skipped
# [4] \x0a skipped
# cannot use a plain range because locales

###############################################################################
main "$@"

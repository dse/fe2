#!/usr/bin/env bash
set -o errexit                  # exit if any pipeline fails
set -o nounset                  # set your variables first
set -o pipefail                 # if one component fails the pipeline fails
shopt -s lastpipe               # last component is exec'd in foreground

NOT_ASCII_PRINTABLE=$'[^] !"#$%&\x27()*+,./0-9:;<=>?@A-Z[\^_a-z`{|}~\t\r-]'

# will match null characters?
NON_ASCII=$'[^] !"#$%&\x27()*+,./0-9:;<=>?@A-Z[\^_a-z`{|}~\x01\x02\x03\x04\x05\x06\x07\x08\x09\x0b\x0c\x0d\x0e\x0f\x10\x11\x12\x13\x14\x15\x16\x17\x18\x19\x1a\x1b\x1c\x1d\x1e\x1f-]'
#             ^[1]                                        ^[3]                                ^[4]                                                                                ^[2]
# [1] ] must appear first either after [ or after [^
# [2] - must appear before closing ] or after opening [ or after opening [^
# [3] \x00 skipped
# [4] \x0a skipped

# exclude lines AT LEAST 1024 characters long
long_line_filter="................................" # 32 characters
long_line_filter="${long_line_filter}${long_line_filter}" # 64
long_line_filter="${long_line_filter}${long_line_filter}" # 128
long_line_filter="${long_line_filter}${long_line_filter}" # 256
long_line_filter="${long_line_filter}${long_line_filter}" # 512
long_line_filter="${long_line_filter}${long_line_filter}" # 1024

declare -a include=()
declare -a exclude=()
declare -a exclude_dir=()

allow_bin=0
allow_all_dirs=0
allow_temp=0
allow_bin=0
allow_quasi=0

main () {
    if command -v ggrep &>/dev/null ; then grep=ggrep ; else grep=grep ; fi
    OPTERR=0
    while getopts '^:/:.:-:' OPTION ; do
        case "${OPTION}" in
            '-')                # --whatever -- hacky long options
                case "${OPTARG}" in
                    allow-all-dirs)   exclude_list_dirs=();;
                    allow-temp)       exclude_list_temp=();;
                    allow-bin)        exclude_list_bin=();;
                    allow-quasi)      exclude_list_quasi=();;
                    allow-bloat)      exclude_list_bloat=();;
                    allow-long-lines) long_line_filter=$'\r\r';; # pattern will never match
                    allow-all)
                        exclude_list_dirs=()
                        exclude_list_temp=()
                        exclude_list_bin=()
                        exclude_list_quasi=()
                        exclude_list_bloat=()
                        ;;
                    *)
                        OPTIND=$((OPTIND - 1))
                        break
                        ;;
                esac
                ;;
            '^')
                case "${OPTARG}" in
                    /*)         # -^/node_modules
                        exclude_dir+=("--exclude-dir=${OPTARG#/}")
                        ;;
                    .*)         # -^.js
                        exclude+=("--exclude=*.${OPTARG#.}")
                        array_delete include "--include=*.${OPTARG#.}"
                        ;;
                    *)
                        echo "invalid option -- -^${OPTARG}"
                        exit 1
                        ;;
                esac
                ;;
            '/')                # -/node_modules
                array_delete exclude_dir "--exclude-dir=${OPTARG}"
                array_delete exclude_list_dirs "--exclude-dir=${OPTARG}"
                ;;
            '.')                # -.js
                include+=("--include=*.${OPTARG}")
                array_delete exclude            "--exclude=*.${OPTARG}"
                array_delete exclude_list_bloat "--exclude=*.${OPTARG}"
                array_delete exclude_list_quasi "--exclude=*.${OPTARG}"
                array_delete exclude_list_bin   "--exclude=*.${OPTARG}"
                array_delete exclude_list_temp  "--exclude=*.${OPTARG}"
                ;;
            *)
                OPTIND=$((OPTIND - 1))
                break
                ;;
        esac
    done
    shift $((OPTIND - 1))
    local -a arguments=("$@")
    local -a new_arguments=()
    local i
    for i in "${arguments[@]}" ; do
        case "${i}" in
            NON_ASCII)
                new_arguments+=("${NON_ASCII}")
                ;;
            NOT_ASCII_PRINTABLE)
                new_arguments+=("${NOT_ASCII_PRINTABLE}")
                ;;
            CSS_CLASS=*)
                classname="${i#*=}"
                local rx="(?:(?<=^|[[:space:]])class[[:space:]]*=[[:space:]]*(?:\"(?:[^\"]*[[:space:]])?(?:${classname})(?:[[:space:]][^\"]*)?\"|'(?:[^']*[[:space:]])?(?:${classname})(?:[[:space:]][^']*)?'|(?:${classname})(?=\$|[[:space:]]|>|/)))"
                new_arguments+=("${rx}");;
            HTML_ATTRIBUTE=*)
                local attrname="${i#*=}"
                local rx="(?:(?<=^|[[:space:]])(?:${attrname})(?:[[:space:]]*=[[:space:]]*(?:\"[^\"]*\"|'[^']*'|[^\"'[:space:]]+))?)"
                new_arguments+=("${rx}");;
            *)
                new_arguments+=("${i}");;
        esac
    done
    set -- "${new_arguments[@]}"
    set -o xtrace
    "${grep}" \
        "${exclude_list_dirs[@]}" \
        "${exclude_dir[@]}" \
        "${include[@]}" \
        "${exclude_list_temp[@]}" \
        "${exclude_list_bin[@]}" \
        "${exclude_list_quasi[@]}" \
        "${exclude_list_bloat[@]}" \
        "${exclude[@]}" \
        -I -r "$@" | grep -v "${long_line_filter}"
}

array_delete () {
    local varname="$1"; shift
    local delete="$1"; shift
    local -n var="${varname}"
    local -a temp=()
    for i in "${var[@]}" ; do
        if [[ "${i}" != "$delete" ]] ; then
            temp+=("${i}")
        fi
    done
    var=("${temp[@]}")
}

declare -a exclude_list_dirs=(
    --exclude-dir='vendor'
    --exclude-dir='node_modules'
    --exclude-dir='.cache'
    --exclude-dir='.cpan'
    --exclude-dir='.git'
    --exclude-dir='.svn'
    --exclude-dir='.sass-cached'
    --exclude-dir='.elpa'
)
declare -a exclude_list_temp=(
    --exclude='*~'
    --exclude='#*#'
    --exclude='.*~'
    --exclude='.#*#'
    --exclude='*.bak'
    --exclude='*.tmp'
    --exclude='*.old'
    --exclude='*.orig'
    --exclude='*.bak.*'
    --exclude='*.tmp.*'
    --exclude='*.old.*'
    --exclude='*.orig.*'
)
declare -a exclude_list_bin=(
    --exclude='*.zip'
    --exclude='*.jar'
    --exclude='*.gz'
    --exclude='*.docx'
    --exclude='*.xlsx'
    --exclude='*.pptx'
    --exclude='*.ttf'
    --exclude='*.woff'
    --exclude='*.ttc'
    --exclude='*.woff'
    --exclude='*.eot'
    --exclude='*.gif'
    --exclude='*.jpg'
    --exclude='*.jpeg'
    --exclude='*.png'
    --exclude='*.webp'
    --exclude='*.bmp'
    --exclude='*.wav'
    --exclude='*.mp3'
    --exclude='*.aac'
    --exclude='*.wma'
    --exclude='*.mp4'
    --exclude='*.mov'
    --exclude='*.qt'
    --exclude='*.wmv'
    --exclude='*.exe'
    --exclude='*.a'
    --exclude='*.o'
    --exclude='*.so'
    --exclude='*.dll'
    --exclude='*.dylib'
    --exclude='*.elc'
    --exclude='*.class'
)
declare -a exclude_list_quasi=(
    # text files that may contain some amount of binary content
    --exclude='*.pdf'
    --exclude='*.doc'
    --exclude='*.xls'
    --exclude='*.ppt'
)
declare -a exclude_list_bloat=(
    # files containing large amounts of extraneous information;
    # files containing excessively long lines
    --exclude='*.min'
    --exclude='*.min.*'
    --exclude='*.map'
    --exclude='*.map.*'
    --exclude='composer.lock'
    --exclude='package-lock.json'
    --exclude='yarn.lock'
    --exclude='*.bundle.js'
    --exclude='*.chunk.js'
    --exclude='*.ps'
    --exclude='*.sfd'
)

main "$@"
